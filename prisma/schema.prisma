// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum Country {
  INDIA
  AMERICA
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

// User model with role-based permissions
model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  name           String
  role           Role            @default(MEMBER)
  country        Country         @default(INDIA)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  orders         Order[]
  paymentMethods PaymentMethod[]

  @@map("users")
}

// Restaurant model with country-based access
model Restaurant {
  id          String     @id @default(cuid())
  name        String
  description String?
  country     Country
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  menuItems   MenuItem[]

  @@map("restaurants")
}

// Menu items belonging to restaurants
model MenuItem {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  category     String?
  restaurantId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]

  @@map("menu_items")
}

// Order model
model Order {
  id         String      @id @default(cuid())
  userId     String
  status     OrderStatus @default(PENDING)
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

// Junction table for order and menu items
model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int      @default(1)
  price      Float
  createdAt  DateTime @default(now())

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

// Payment methods (Admin only can manage)
model PaymentMethod {
  id            String   @id @default(cuid())
  userId        String
  type          String   // e.g., "credit_card", "debit_card", "upi"
  cardLastFour  String?
  cardBrand     String?  // e.g., "Visa", "MasterCard"
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}
